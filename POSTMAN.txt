1. 	http://116.203.27.46:5002/user_info
	
	req.
	POST
	age: int
	salary: int
	name: str
	auth_token


	resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

	Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


//создать схему с помощью валидатора
let schema = {
    "type": "object",
    "title": "The root schema",
    "description": "The root schema comprises the entire JSON document.",
    "default": {},
    "examples": [
        {
            "person": {
                "u_age": 32,
                "u_name": [
                    "elena",
                    2000,
                    32
                ],
                "u_salary_1_5_year": 8000
            },
            "qa_salary_after_12_months": 5800.0,
            "qa_salary_after_6_months": 4000,
            "start_qa_salary": 2000
        }
    ],
    "required": [
        "person",
        "qa_salary_after_12_months",
        "qa_salary_after_6_months",
        "start_qa_salary"
    ],
    "properties": {
        "person": {
            "$id": "#/properties/person",
            "type": "object",
            "title": "The person schema",
            "description": "An explanation about the purpose of this instance.",
            "default": {},
            "examples": [
                {
                    "u_age": 32,
                    "u_name": [
                        "elena",
                        2000,
                        32
                    ],
                    "u_salary_1_5_year": 8000
                }
            ],
            "required": [
                "u_age",
                "u_name",
                "u_salary_1_5_year"
            ],
            "properties": {
                "u_age": {
                    "$id": "#/properties/person/properties/u_age",
                    "type": "integer",
                    "title": "The u_age schema",
                    "description": "An explanation about the purpose of this instance.",
                    "default": 0,
                    "examples": [
                        32
                    ]
                },
                "u_name": {
                    "$id": "#/properties/person/properties/u_name",
                    "type": "array",
                    "title": "The u_name schema",
                    "description": "An explanation about the purpose of this instance.",
                    "default": [],
                    "examples": [
                        [
                            "elena",
                            2000
                        ]
                    ],
                    "additionalItems": true,
                    "items": {
                        "$id": "#/properties/person/properties/u_name/items",
                        "anyOf": [
                            {
                                "$id": "#/properties/person/properties/u_name/items/anyOf/0",
                                "type": "string",
                                "title": "The first anyOf schema",
                                "description": "An explanation about the purpose of this instance.",
                                "default": "",
                                "examples": [
                                    "elena"
                                ]
                            },
                            {
                                "$id": "#/properties/person/properties/u_name/items/anyOf/1",
                                "type": "integer",
                                "title": "The second anyOf schema",
                                "description": "An explanation about the purpose of this instance.",
                                "default": 0,
                                "examples": [
                                    2000,
                                    32
                                ]
                            }
                        ]
                    }
                },
                "u_salary_1_5_year": {
                    "$id": "#/properties/person/properties/u_salary_1_5_year",
                    "type": "integer",
                    "title": "The u_salary_1_5_year schema",
                    "description": "An explanation about the purpose of this instance.",
                    "default": 0,
                    "examples": [
                        8000
                    ]
                }
            },
            "additionalProperties": true
        },
        "qa_salary_after_12_months": {
            "$id": "#/properties/qa_salary_after_12_months",
            "type": "number",
            "title": "The qa_salary_after_12_months schema",
            "description": "An explanation about the purpose of this instance.",
            "default": 0.0,
            "examples": [
                5800.0
            ]
        },
        "qa_salary_after_6_months": {
            "$id": "#/properties/qa_salary_after_6_months",
            "type": "integer",
            "title": "The qa_salary_after_6_months schema",
            "description": "An explanation about the purpose of this instance.",
            "default": 0,
            "examples": [
                4000
            ]
        },
        "start_qa_salary": {
            "$id": "#/properties/start_qa_salary",
            "type": "integer",
            "title": "The start_qa_salary schema",
            "description": "An explanation about the purpose of this instance.",
            "default": 0,
            "examples": [
                2000
            ]
        }
    },
    "additionalProperties": true
}

//сниппет Use Tiny Validator for JSON data
pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;
});

pm.test("Coefficients salary", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(jsonData.start_qa_salary*2.9);
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(jsonData.start_qa_salary*2);
    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(jsonData.start_qa_salary*4);
});


//создаем в окружении (Environment) переменную salary_1_5_year c пом. сниппета Response body: JSON value check
pm.test("salary_1_5_year", function () {   
    var jsonData = pm.response.json();
    pm.environment.set("salary_1_5_year", jsonData.person.u_salary_1_5_year);
});


2. 	http://116.203.27.46:5002/new_data
	req.
	POST
	age: int
	salary: int
	name: str
	auth_token

Responce
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, написать тесты по проверке правильности результата перемножения на коэффициент.
4) проверить, что 2-й элемент массива salary больше 1-го и 0-го


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//2 Проверка структуры json в ответе.
let schema = {
    "type": "object",
    "title": "The root schema",
    "description": "The root schema comprises the entire JSON document.",
    "default": {},
    "examples": [
        {
            "age": 10,
            "name": "elena",
            "salary": [
                2000,
                "4000",
                "6000"
            ]
        }
    ],
    "required": [
        "age",
        "name",
        "salary"
    ],
    "properties": {
        "age": {
            "$id": "#/properties/age",
            "type": "integer",
            "title": "The age schema",
            "description": "An explanation about the purpose of this instance.",
            "default": 0,
            "examples": [
                10
            ]
        },
        "name": {
            "$id": "#/properties/name",
            "type": "string",
            "title": "The name schema",
            "description": "An explanation about the purpose of this instance.",
            "default": "",
            "examples": [
                "elena"
            ]
        },
        "salary": {
            "$id": "#/properties/salary",
            "type": "array",
            "title": "The salary schema",
            "description": "An explanation about the purpose of this instance.",
            "default": [],
            "examples": [
                [
                    2000,
                    "4000"
                ]
            ],
            "additionalItems": true,
            "items": {
                "$id": "#/properties/salary/items",
                "anyOf": [
                    {
                        "$id": "#/properties/salary/items/anyOf/0",
                        "type": "integer",
                        "title": "The first anyOf schema",
                        "description": "An explanation about the purpose of this instance.",
                        "default": 0,
                        "examples": [
                            2000
                        ]
                    },
                    {
                        "$id": "#/properties/salary/items/anyOf/1",
                        "type": "string",
                        "title": "The second anyOf schema",
                        "description": "An explanation about the purpose of this instance.",
                        "default": "",
                        "examples": [
                            "4000",
                            "6000"
                        ]
                    }
                ]
            }
        }
    },
    "additionalProperties": true
}

pm.test('Schema is valid', function () { // SNIPPET - Use Tiny Validator for JSON data
    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;
});


pm.test("Coefficients salary", function () {
    var jsonData = pm.response.json();
    let salary1 = +(jsonData.salary[1]);
    let salary2 = +(jsonData.salary[2]);
    pm.expect(salary1).to.eql(jsonData.salary[0]*2);
    pm.expect(salary2).to.eql(jsonData.salary[0]*3);
});

pm.test("Massiv", function () {
    var jsonData = pm.response.json();
    let salary1 = +(jsonData.salary[1]);
    let salary2 = +(jsonData.salary[2]);
    pm.expect(salary2>salary1).to.be.true;
});


3	http://116.203.27.46:5002/test_pet_info
	req.
	POST
	age: int
	weight: int
	name: str
	auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
